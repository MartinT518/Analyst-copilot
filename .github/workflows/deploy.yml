name: Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Push Docker Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      ingest-image: ${{ steps.meta-ingest.outputs.tags }}
      agents-image: ${{ steps.meta-agents.outputs.tags }}
      image-digest: ${{ steps.build-ingest.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for acp-ingest
        id: meta-ingest
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/acp-ingest
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for acp-agents
        id: meta-agents
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/acp-agents
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push acp-ingest
        id: build-ingest
        uses: docker/build-push-action@v5
        with:
          context: ./acp-ingest
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-ingest.outputs.tags }}
          labels: ${{ steps.meta-ingest.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push acp-agents
        id: build-agents
        uses: docker/build-push-action@v5
        with:
          context: ./acp-agents
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-agents.outputs.tags }}
          labels: ${{ steps.meta-agents.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 2: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://acp-staging.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          # Install docker-compose if not available
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Create staging environment file
        run: |
          cat > .env.staging << EOF
          # Staging Environment Configuration
          ENVIRONMENT=staging
          DEBUG=false
          
          # Database
          DATABASE_URL=postgresql://acp_user:${{ secrets.STAGING_DB_PASSWORD }}@staging-db:5432/acp_staging_db
          
          # Redis
          REDIS_URL=redis://staging-redis:6379/0
          
          # LLM
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          LLM_ENDPOINT=${{ secrets.LLM_ENDPOINT }}
          EMBEDDING_ENDPOINT=${{ secrets.EMBEDDING_ENDPOINT }}
          
          # Security
          SECRET_KEY=${{ secrets.STAGING_SECRET_KEY }}
          
          # Docker Images
          INGEST_IMAGE=${{ needs.build-and-push.outputs.ingest-image }}
          AGENTS_IMAGE=${{ needs.build-and-push.outputs.agents-image }}
          EOF

      - name: Deploy to staging
        run: |
          # Use staging-specific docker-compose file
          docker-compose -f docker-compose.staging.yml --env-file .env.staging up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Health check
          curl -f http://localhost:8000/health || exit 1

      - name: Run smoke tests
        run: |
          # Basic smoke tests for staging deployment
          echo "Running smoke tests..."
          
          # Test ingest service
          curl -f http://localhost:8000/health
          curl -f http://localhost:8000/docs
          
          # Test agents service (if available)
          curl -f http://localhost:8001/health || echo "Agents service not ready"
          
          echo "Smoke tests passed!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Staging deployment successful!"
          echo "üîó Staging URL: https://acp-staging.example.com"

  # Job 3: Deploy to Production (Manual Approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://acp.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create production environment file
        run: |
          cat > .env.production << EOF
          # Production Environment Configuration
          ENVIRONMENT=production
          DEBUG=false
          
          # Database
          DATABASE_URL=postgresql://acp_user:${{ secrets.PROD_DB_PASSWORD }}@prod-db:5432/acp_prod_db
          
          # Redis
          REDIS_URL=redis://prod-redis:6379/0
          
          # LLM
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          LLM_ENDPOINT=${{ secrets.LLM_ENDPOINT }}
          EMBEDDING_ENDPOINT=${{ secrets.EMBEDDING_ENDPOINT }}
          
          # Security
          SECRET_KEY=${{ secrets.PROD_SECRET_KEY }}
          
          # Docker Images
          INGEST_IMAGE=${{ needs.build-and-push.outputs.ingest-image }}
          AGENTS_IMAGE=${{ needs.build-and-push.outputs.agents-image }}
          
          # Production-specific settings
          SSL_ENABLED=true
          SECURE_HEADERS_ENABLED=true
          EOF

      - name: Backup production database
        run: |
          echo "Creating production database backup..."
          # Add your backup logic here
          # pg_dump $DATABASE_URL > backup-$(date +%Y%m%d-%H%M%S).sql

      - name: Deploy to production
        run: |
          # Use production-specific docker-compose file
          docker-compose -f docker-compose.production.yml --env-file .env.production up -d
          
          # Wait for services to be ready
          sleep 60
          
          # Health check
          curl -f https://acp.example.com/health || exit 1

      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          
          # Test production endpoints
          curl -f https://acp.example.com/health
          curl -f https://acp.example.com/docs
          
          echo "Production smoke tests passed!"

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Production deployment successful!"
          echo "üîó Production URL: https://acp.example.com"

  # Job 4: Rollback (Manual Trigger)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Rollback to previous version
        run: |
          echo "Rolling back to previous version..."
          # Add rollback logic here
          # docker-compose down
          # docker-compose up -d --scale app=0
          # docker-compose up -d

      - name: Notify rollback
        run: |
          echo "‚ö†Ô∏è Deployment rolled back due to failure"

  # Job 5: Security Scan of Images
  security-scan-images:
    name: Security Scan Images
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-push.outputs.ingest-image }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 6: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          # Create basic performance test
          cat > performance-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export let options = {
            vus: 10,
            duration: '30s',
          };

          export default function () {
            let response = http.get('http://localhost:8000/health');
            check(response, { 'status was 200': (r) => r.status == 200 });
            sleep(1);
          }
          EOF
          
          k6 run performance-test.js

  # Job 7: Update Documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update deployment documentation
        run: |
          # Update docs with latest deployment info
          echo "## Latest Deployment" >> docs/deployment-history.md
          echo "- **Date**: $(date)" >> docs/deployment-history.md
          echo "- **Commit**: ${{ github.sha }}" >> docs/deployment-history.md
          echo "- **Images**: ${{ needs.build-and-push.outputs.ingest-image }}" >> docs/deployment-history.md
          echo "" >> docs/deployment-history.md

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/deployment-history.md
          git commit -m "docs: update deployment history [skip ci]" || exit 0
          git push

