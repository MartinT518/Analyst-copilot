name: Deploy

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Push Container Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [acp-ingest, acp-agents]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy using Docker Compose (for simple deployments)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.analyst-copilot.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/analyst-copilot
          
          # Pull latest code
          git pull origin main
          
          # Update environment variables
          echo "IMAGE_TAG=${{ github.sha }}" > .env.staging
          cat .env.staging.template >> .env.staging
          
          # Pull latest images
          docker-compose -f docker-compose.local.yml pull
          
          # Deploy with zero downtime
          docker-compose -f docker-compose.local.yml up -d --remove-orphans
          
          # Health check
          sleep 30
          curl -f http://localhost:8001/health || exit 1
          curl -f http://localhost:8002/health || exit 1
          
          echo "‚úÖ Staging deployment successful!"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://analyst-copilot.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/analyst-copilot
          
          # Create backup
          docker-compose -f docker-compose.local.yml exec -T postgres pg_dump -U acp_user acp_db > backup_$(date +%Y%m%d_%H%M%S).sql
          
          # Pull latest code
          git pull origin main
          
          # Update environment variables
          echo "IMAGE_TAG=${{ github.sha }}" > .env.production
          cat .env.production.template >> .env.production
          
          # Pull latest images
          docker-compose -f docker-compose.local.yml pull
          
          # Deploy with rolling update
          docker-compose -f docker-compose.local.yml up -d --remove-orphans
          
          # Health check
          sleep 60
          curl -f http://localhost:8001/health || exit 1
          curl -f http://localhost:8002/health || exit 1
          curl -f http://localhost:8001/metrics || exit 1
          curl -f http://localhost:8002/metrics || exit 1
          
          echo "‚úÖ Production deployment successful!"
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: "üöÄ Production deployment successful for ${{ github.ref }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: "‚ùå Production deployment failed for ${{ github.ref }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

