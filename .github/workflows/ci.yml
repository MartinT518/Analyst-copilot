name: CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety semgrep

      - name: Run Bandit security scan
        run: |
          bandit -r acp-ingest/ acp-agents/ -f json -o bandit-report.json
          bandit -r acp-ingest/ acp-agents/ -f txt

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep
        run: |
          semgrep --config=auto acp-ingest/ acp-agents/ --json --output=semgrep-report.json || true
          semgrep --config=auto acp-ingest/ acp-agents/

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  # =============================================================================
  # BACKEND TESTING
  # =============================================================================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd acp-ingest
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx

      - name: Run linting
        run: |
          cd acp-ingest
          pip install black flake8 isort mypy
          black --check .
          flake8 .
          isort --check-only .
          mypy . --ignore-missing-imports

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-testing-only
          JWT_SECRET_KEY: test-jwt-secret-key-for-testing-only
          ENCRYPTION_KEY: test-encryption-key-for-testing-only
          OAUTH2_CLIENT_ID: test-client-id
          OAUTH2_CLIENT_SECRET: test-client-secret
          OAUTH2_AUTHORIZATION_URL: https://test.com/oauth/authorize
          OAUTH2_TOKEN_URL: https://test.com/oauth/token
          OAUTH2_USERINFO_URL: https://test.com/oauth/userinfo
          OAUTH2_REDIRECT_URI: http://localhost:3000/auth/callback
        run: |
          cd acp-ingest
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./acp-ingest/coverage.xml
          flags: backend
          name: backend-coverage

  # =============================================================================
  # FRONTEND TESTING
  # =============================================================================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd acp-frontend
          npm install --legacy-peer-deps

      - name: Run linting
        run: |
          cd acp-frontend
          if [ -f package.json ]; then
            npm run lint || echo "Linting not configured yet"
          else
            echo "No package.json found, skipping linting"
          fi

      - name: Run tests
        run: |
          cd acp-frontend
          if [ -f package.json ]; then
            npm test -- --coverage --watchAll=false || echo "Tests not configured yet"
          else
            echo "No package.json found, skipping tests"
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: success() && hashFiles('acp-frontend/coverage/lcov.info') != ''
        with:
          file: ./acp-frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # =============================================================================
  # INTEGRATION TESTING
  # =============================================================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build services
        run: |
          docker-compose -f docker-compose.yml build

      - name: Start services
        run: |
          docker-compose -f docker-compose.yml up -d
          sleep 30  # Wait for services to be ready

      - name: Run integration tests
        run: |
          # Add integration tests here
          echo "Running integration tests..."

      - name: Stop services
        if: always()
        run: |
          docker-compose -f docker-compose.yml down

  # =============================================================================
  # DEPLOYMENT
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, backend-test, frontend-test, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment steps here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-scan, backend-test, frontend-test, integration-test]
    if: github.ref == 'refs/heads/master'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment steps here

  # =============================================================================
  # NOTIFICATION
  # =============================================================================
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify team
        run: |
          echo "Notifying team of deployment status..."
          # Add notification logic here
