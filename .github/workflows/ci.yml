name: CI Pipeline

on:
  push:
    branches: [ master, develop, 'feature/*' ]
  pull_request:
    branches: [ master, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Linting
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
            ${{ runner.os }}-pip-

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --only-binary=:all: -r requirements-dev.txt

      - name: Check code formatting with Black
        run: |
          black --check --diff .

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff .

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Type check with mypy
        run: |
          # Install service dependencies for type checking
          find . -name "requirements.txt" -exec pip install --only-binary=:all: -r {} \;
          mypy --config-file mypy.ini --ignore-missing-imports .

  # Job 2: Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-security-
            ${{ runner.os }}-pip-

      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit pip-audit safety

      - name: Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium

      - name: Run pip-audit for dependency vulnerabilities
        run: |
          find . -name "requirements.txt" -exec pip-audit -r {} \;

      - name: Run Safety check
        run: |
          find . -name "requirements.txt" -exec safety check -r {} \;

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-results
          path: bandit-report.json

  # Job 3: Test Matrix
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: acp_password
          POSTGRES_USER: acp_user
          POSTGRES_DB: acp_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --only-binary=:all: -r requirements-dev.txt
          
          # Install dependencies for each service
          if [ -f acp-ingest/requirements.txt ]; then
            pip install --only-binary=:all: -r acp-ingest/requirements.txt
          fi
          if [ -f acp-agents/requirements.txt ]; then
            pip install --only-binary=:all: -r acp-agents/requirements.txt
          fi
          if [ -f acp-cli/requirements.txt ]; then
            pip install --only-binary=:all: -r acp-cli/requirements.txt
          fi
          
          # Install services in editable mode for proper imports
          if [ -f acp-ingest/setup.py ]; then
            pip install -e ./acp-ingest
          fi
          if [ -f acp-agents/setup.py ]; then
            pip install -e ./acp-agents
          fi
          if [ -f acp-code-analyzer/setup.py ]; then
            pip install -e ./acp-code-analyzer
          fi
          if [ -f acp-improvement/setup.py ]; then
            pip install -e ./acp-improvement
          fi

      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://acp_user:acp_password@localhost:5432/acp_test_db
          REDIS_URL: redis://localhost:6379/0
          TESTING: true
        run: |
          # Create test databases
          PGPASSWORD=acp_password createdb -h localhost -U acp_user acp_ingest_test || true
          PGPASSWORD=acp_password createdb -h localhost -U acp_user acp_agents_test || true

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://acp_user:acp_password@localhost:5432/acp_test_db
          REDIS_URL: redis://localhost:6379/0
          TESTING: true
          COVERAGE_THRESHOLD: 80
        run: |
          # Run tests for each service
          coverage run --source=. -m pytest -v --tb=short
          
          # Generate coverage report
          coverage report --fail-under=$COVERAGE_THRESHOLD
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage.xml
            .coverage

  # Job 4: CLI Tests
  cli-tests:
    name: CLI Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install CLI dependencies
        run: |
          python -m pip install --upgrade pip
          cd acp-cli && pip install -e ".[dev]"

      - name: Test CLI installation
        run: |
          acp --help
          acp version

      - name: Run CLI tests
        run: |
          cd acp-cli && python -m pytest tests/ -v

  # Job 5: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: acp_password
          POSTGRES_USER: acp_user
          POSTGRES_DB: acp_integration_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install docker-compose pytest requests

      - name: Start services with docker-compose
        run: |
          cp .env.example .env
          docker-compose up -d --build
          
          # Wait for services to be ready
          sleep 30

      - name: Run integration tests
        run: |
          # Test service health endpoints
          curl -f http://localhost:8000/health || exit 1
          
          # Test CLI integration
          acp status || true

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  # Job 6: Build and Test Docker Images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan]
    outputs:
      image-digest: ${{ steps.build-ingest.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build acp-ingest image
        id: build-ingest
        uses: docker/build-push-action@v5
        with:
          context: ./acp-ingest
          push: false
          tags: acp-ingest:test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Build acp-agents image
        uses: docker/build-push-action@v5
        with:
          context: ./acp-agents
          push: false
          tags: acp-agents:test
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Test Docker images
        run: |
          # Test that images can start
          docker run --rm acp-ingest:test python -c "import app; print('acp-ingest OK')"
          docker run --rm acp-agents:test python -c "print('acp-agents OK')"

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Job 7: Dependency Check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip pip-tools

      - name: Check for dependency conflicts
        run: |
          # Check each service's dependencies
          for service in acp-ingest acp-agents acp-cli; do
            if [ -f "$service/requirements.txt" ]; then
              echo "Checking $service dependencies..."
              # Install dependencies and check for conflicts
              pip install -r "$service/requirements.txt"
              pip check
            fi
          done

      - name: Check for outdated dependencies
        run: |
          pip install pip-check
          for service in acp-ingest acp-agents acp-cli; do
            if [ -f "$service/requirements.txt" ]; then
              echo "Checking $service for outdated packages..."
              pip install -r "$service/requirements.txt"
              pip list --outdated
            fi
          done

  # Job 8: Documentation Check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for required documentation
        run: |
          # Check that required docs exist
          required_docs=(
            "README.md"
            "docs/infra.md"
            "acp-cli/README.md"
            ".env.example"
          )
          
          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "Missing required documentation: $doc"
              exit 1
            fi
          done

      - name: Check documentation links
        run: |
          # Simple check for broken internal links
          find . -name "*.md" -exec grep -l "](\./" {} \; | while read file; do
            echo "Checking links in $file"
            # Get the directory of the current file
            file_dir=$(dirname "$file")
            grep -o "](\.\/[^)]*)" "$file" | sed 's/](\.\///' | sed 's/)//' | while read link; do
              # Check if the link exists relative to the file's directory
              if [ ! -f "$file_dir/$link" ] && [ ! -d "$file_dir/$link" ]; then
                echo "Broken link in $file: $link"
                exit 1
              fi
            done
          done

  # Final job that depends on all others
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: 
      - lint-and-format
      - security-scan
      - test
      - cli-tests
      - docker-build
      - dependency-check
      - docs-check
    if: always()
    steps:
    - name: Check all jobs status
      run: |
        if [[ "${{ needs.lint-and-format.result }}" != "success" ]]; then
          echo "Lint and format check failed"
          exit 1
        fi
        if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
          echo "Security scan failed"
          exit 1
        fi
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Tests failed"
          exit 1
        fi
        if [[ "${{ needs.cli-tests.result }}" != "success" ]]; then
          echo "CLI tests failed"
          exit 1
        fi
        if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
          echo "Docker build failed"
          exit 1
        fi
        if [[ "${{ needs.dependency-check.result }}" != "success" ]]; then
          echo "Dependency check failed"
          exit 1
        fi
        if [[ "${{ needs.docs-check.result }}" != "success" ]]; then
          echo "Documentation check failed"
          exit 1
        fi
        echo "All checks passed! Ō£ģ"

