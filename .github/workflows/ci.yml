name: CI Pipeline

on:
  push:
    branches: [ main, master, develop, 'feature/*' ]
  pull_request:
    branches: [ main, master, develop ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        service: ["acp-ingest", "acp-agents", "acp-cli"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install development dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Install service dependencies
      run: |
        if [ -f "${{ matrix.service }}/requirements.txt" ]; then
          pip install -r ${{ matrix.service }}/requirements.txt
        fi
        
    - name: Code formatting check (Black)
      run: |
        black --check --diff ${{ matrix.service }}/
        
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff ${{ matrix.service }}/
        
    - name: Linting (flake8)
      run: |
        flake8 ${{ matrix.service }}/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ${{ matrix.service }}/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type checking (mypy)
      run: |
        mypy ${{ matrix.service }}/ --ignore-missing-imports --no-strict-optional
        
    - name: Security scan (bandit)
      run: |
        bandit -r ${{ matrix.service }}/ -f json -o bandit-report-${{ matrix.service }}-${{ matrix.python-version }}.json || true
        bandit -r ${{ matrix.service }}/ --severity-level medium
        
    - name: Dependency vulnerability scan
      run: |
        if [ -f "${{ matrix.service }}/requirements.txt" ]; then
          pip-audit -r ${{ matrix.service }}/requirements.txt --format=json --output=pip-audit-${{ matrix.service }}-${{ matrix.python-version }}.json || true
          pip-audit -r ${{ matrix.service }}/requirements.txt
        fi
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ matrix.service }}-${{ matrix.python-version }}
        path: |
          bandit-report-*.json
          pip-audit-*.json
        retention-days: 30

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        service: ["acp-ingest", "acp-agents", "acp-cli"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        if [ -f "${{ matrix.service }}/requirements.txt" ]; then
          pip install -r ${{ matrix.service }}/requirements.txt
        fi
        
    - name: Run unit tests with coverage
      run: |
        cd ${{ matrix.service }}
        if [ -d "tests" ]; then
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80
        else
          echo "No tests directory found for ${{ matrix.service }}"
        fi
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}
        name: codecov-${{ matrix.service }}
        fail_ci_if_error: false

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: acp_user
          POSTGRES_PASSWORD: acp_password
          POSTGRES_DB: acp_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      chroma:
        image: chromadb/chroma:latest
        env:
          CHROMA_SERVER_HOST: 0.0.0.0
          CHROMA_SERVER_HTTP_PORT: 8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/api/v1/heartbeat || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 8000:8000
    
    env:
      DATABASE_URL: postgresql://acp_user:acp_password@localhost:5432/acp_test_db
      REDIS_URL: redis://localhost:6379/0
      CHROMA_URL: http://localhost:8000
      ENVIRONMENT: test
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r acp-ingest/requirements.txt
        pip install -r acp-agents/requirements.txt
        pip install -r acp-cli/requirements.txt || echo "No CLI requirements.txt"
        
    - name: Wait for services to be ready
      run: |
        # Wait for PostgreSQL
        until pg_isready -h localhost -p 5432 -U acp_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Wait for Redis
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
        
        # Wait for Chroma
        until curl -f http://localhost:8000/api/v1/heartbeat; do
          echo "Waiting for Chroma..."
          sleep 5
        done
        
    - name: Run database migrations
      run: |
        cd migrations/acp-ingest
        alembic upgrade head
        cd ../acp-agents
        alembic upgrade head
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short
        
    - name: Test CLI commands
      run: |
        cd acp-cli
        pip install -e .
        acp --help
        acp config show || echo "Config command test"
        acp monitor health || echo "Health check test (expected to fail without running services)"

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build acp-ingest image
      uses: docker/build-push-action@v5
      with:
        context: ./acp-ingest
        file: ./acp-ingest/Dockerfile
        tags: acp-ingest:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build acp-agents image
      uses: docker/build-push-action@v5
      with:
        context: ./acp-agents
        file: ./acp-agents/Dockerfile
        tags: acp-agents:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'acp-ingest:test'
        format: 'sarif'
        output: 'trivy-ingest-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Run Trivy vulnerability scanner for agents
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'acp-agents:test'
        format: 'sarif'
        output: 'trivy-agents-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-ingest-results.sarif'
        
    - name: Upload Trivy scan results for agents
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-agents-results.sarif'

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: acp_user
          POSTGRES_PASSWORD: acp_password
          POSTGRES_DB: acp_perf_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    env:
      DATABASE_URL: postgresql://acp_user:acp_password@localhost:5432/acp_perf_db
      REDIS_URL: redis://localhost:6379/0
      ENVIRONMENT: performance
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r acp-ingest/requirements.txt
        pip install locust
        
    - name: Start acp-ingest service
      run: |
        cd acp-ingest
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run performance tests
      run: |
        if [ -f "tests/performance/locustfile.py" ]; then
          locust -f tests/performance/locustfile.py --headless --users 10 --spawn-rate 2 --run-time 60s --host http://localhost:8000
        else
          echo "No performance tests found"
        fi

  # Secrets Scanning
  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Documentation and Schema Validation
  documentation:
    name: Documentation & Schema Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install documentation dependencies
      run: |
        pip install mkdocs mkdocs-material
        
    - name: Validate documentation
      run: |
        # Check if all referenced files exist
        find docs/ -name "*.md" -exec grep -l "](.*\.md)" {} \; | while read file; do
          echo "Checking links in $file"
          grep -o "](.*\.md)" "$file" | sed 's/](\(.*\))/\1/' | while read link; do
            if [[ "$link" == /* ]]; then
              # Absolute path
              if [ ! -f ".$link" ]; then
                echo "Broken link in $file: $link"
                exit 1
              fi
            else
              # Relative path
              dir=$(dirname "$file")
              if [ ! -f "$dir/$link" ]; then
                echo "Broken link in $file: $link"
                exit 1
              fi
            fi
          done
        done
        
    - name: Validate OpenAPI schemas
      run: |
        python -c "
        import yaml
        import json
        import os
        
        # Validate any OpenAPI/Swagger files
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith(('.yaml', '.yml')) and ('openapi' in file.lower() or 'swagger' in file.lower()):
                    filepath = os.path.join(root, file)
                    try:
                        with open(filepath, 'r') as f:
                            yaml.safe_load(f)
                        print(f'✓ Valid YAML: {filepath}')
                    except Exception as e:
                        print(f'✗ Invalid YAML: {filepath} - {e}')
                        exit(1)
        "

  # Final Status Check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, container-security, secrets-scan, documentation]
    if: always()
    
    steps:
    - name: Check CI Status
      run: |
        if [[ "${{ needs.code-quality.result }}" == "success" && \
              "${{ needs.unit-tests.result }}" == "success" && \
              "${{ needs.integration-tests.result }}" == "success" && \
              "${{ needs.container-security.result }}" == "success" && \
              "${{ needs.secrets-scan.result }}" == "success" && \
              "${{ needs.documentation.result }}" == "success" ]]; then
          echo "✅ All CI checks passed!"
          exit 0
        else
          echo "❌ Some CI checks failed:"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Container Security: ${{ needs.container-security.result }}"
          echo "Secrets Scan: ${{ needs.secrets-scan.result }}"
          echo "Documentation: ${{ needs.documentation.result }}"
          exit 1
        fi

