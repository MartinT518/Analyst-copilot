# Production Docker Compose Override
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  # PostgreSQL Database - Production Configuration
  postgres:
    environment:
      # Override with production database settings
      POSTGRES_DB: ${POSTGRES_DB:-acp_production}
      POSTGRES_USER: ${POSTGRES_USER:-acp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    # Disable direct port exposure in production
    ports: []
    # Use external network for production
    networks:
      - acp-internal

  # Redis - Production Configuration
  redis:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    # Disable direct port exposure in production
    ports: []
    networks:
      - acp-internal

  # Chroma Vector Database - Production Configuration
  chroma:
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    # Disable direct port exposure in production
    ports: []
    networks:
      - acp-internal

  # ACP Ingest Service - Production Configuration
  acp-ingest:
    environment:
      # Production environment settings
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
      # Security settings
      - SSL_ENABLED=${SSL_ENABLED:-true}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://your-frontend-domain.com}
      # Performance settings
      - DATABASE_POOL_SIZE=${DATABASE_POOL_SIZE:-20}
      - DATABASE_MAX_OVERFLOW=${DATABASE_MAX_OVERFLOW:-30}
      - MAX_CONCURRENT_JOBS=${MAX_CONCURRENT_JOBS:-10}
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # Disable direct port exposure in production
    ports: []
    networks:
      - acp-internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ACP Agents Service - Production Configuration
  acp-agents:
    environment:
      # Production environment settings
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
      # Security settings
      - CORS_ORIGINS=${CORS_ORIGINS:-https://your-frontend-domain.com}
      # Performance settings
      - MAX_CONCURRENT_WORKFLOWS=${MAX_CONCURRENT_WORKFLOWS:-20}
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # Disable direct port exposure in production
    ports: []
    networks:
      - acp-internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Background Worker - Production Configuration
  acp-worker:
    environment:
      # Production environment settings
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=json
      # Performance settings
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - acp-internal

  # Celery Flower - Production Configuration
  flower:
    environment:
      # Production security settings
      - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH:-admin:secure-password}
      - FLOWER_PORT=5555
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # Disable direct port exposure in production
    ports: []
    networks:
      - acp-internal

  # Nginx Reverse Proxy - Production Configuration
  nginx:
    environment:
      # Production settings
      - NGINX_WORKER_PROCESSES=${NGINX_WORKER_PROCESSES:-auto}
      - NGINX_WORKER_CONNECTIONS=${NGINX_WORKER_CONNECTIONS:-1024}
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # Only expose HTTP/HTTPS ports
    ports:
      - "80:80"
      - "443:443"
    networks:
      - acp-internal
      - acp-external
    volumes:
      # Production SSL certificates
      - ${SSL_CERT_PATH:-/etc/ssl/certs}:/etc/ssl/certs:ro
      - ${SSL_KEY_PATH:-/etc/ssl/private}:/etc/ssl/private:ro
      # Production nginx configuration
      - ./config/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro

  # Prometheus - Production Configuration
  prometheus:
    environment:
      # Production retention settings
      - PROMETHEUS_RETENTION_TIME=${PROMETHEUS_RETENTION_TIME:-30d}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # Disable direct port exposure in production
    ports: []
    networks:
      - acp-internal
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro

  # Grafana - Production Configuration
  grafana:
    environment:
      # Production security settings
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-grafana.your-domain.com}
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-https://grafana.your-domain.com}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # Disable direct port exposure in production
    ports: []
    networks:
      - acp-internal
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning:ro

# Production Networks
networks:
  # Internal network for service-to-service communication
  acp-internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/16

  # External network for public-facing services
  acp-external:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Production Volumes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_PATH:-/var/lib/acp/postgres}

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_PATH:-/var/lib/acp/redis}

  chroma_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CHROMA_DATA_PATH:-/var/lib/acp/chroma}

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PROMETHEUS_DATA_PATH:-/var/lib/acp/prometheus}

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${GRAFANA_DATA_PATH:-/var/lib/acp/grafana}
