version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: acp-postgres
    environment:
      POSTGRES_DB: acp_db
      POSTGRES_USER: acp_user
      POSTGRES_PASSWORD: acp_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - acp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U acp_user -d acp_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for background jobs
  redis:
    image: redis:7-alpine
    container_name: acp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - acp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Chroma Vector Database
  chroma:
    image: chromadb/chroma:latest
    container_name: acp-chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - PERSIST_DIRECTORY=/chroma/chroma
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8001:8000"
    networks:
      - acp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ACP Ingest Service
  acp-ingest:
    build:
      context: ./acp-ingest
      dockerfile: Dockerfile
    container_name: acp-ingest
    environment:
      - DATABASE_URL=postgresql://acp_user:acp_password@postgres:5432/acp_db
      - REDIS_URL=redis://redis:6379/0
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
      - LLM_ENDPOINT=${LLM_ENDPOINT:-https://ai.int.cyber.ee/openai}
      - EMBEDDING_ENDPOINT=${EMBEDDING_ENDPOINT:-http://ai.int.cyber.ee:8083/v1}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - acp-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Background Worker (Celery)
  acp-worker:
    build:
      context: ./acp-ingest
      dockerfile: Dockerfile
    container_name: acp-worker
    command: celery -A app.worker worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://acp_user:acp_password@postgres:5432/acp_db
      - REDIS_URL=redis://redis:6379/0
      - CHROMA_HOST=chroma
      - CHROMA_PORT=8000
      - LLM_ENDPOINT=${LLM_ENDPOINT:-https://ai.int.cyber.ee/openai}
      - EMBEDDING_ENDPOINT=${EMBEDDING_ENDPOINT:-http://ai.int.cyber.ee:8083/v1}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - acp-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_healthy
    restart: unless-stopped

  # Celery Flower (Task Monitor)
  flower:
    build:
      context: ./acp-ingest
      dockerfile: Dockerfile
    container_name: acp-flower
    command: celery -A app.worker flower --port=5555
    environment:
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    networks:
      - acp-network
    depends_on:
      - redis
      - acp-worker
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: acp-nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - acp-network
    depends_on:
      - acp-ingest
    restart: unless-stopped
    profiles:
      - production

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: acp-prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - acp-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: acp-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - acp-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  acp-network:
    driver: bridge

